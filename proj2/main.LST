C51 COMPILER V8.18   MAIN                                                                  05/12/2014 22:04:02 PAGE 1   


C51 COMPILER V8.18, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil8051\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "REG932.H"
   2          #include "uart.h"
   3          
   4          #define KEYBOARD 0
   5          #define PLAY_SONG_1 1
   6          #define PLAY_SONG_2 2
   7          #define EFFECT 3
   8          #define MAX_MODE 3
   9          #define MAX_SONG_LENGTH 26
  10          
  11          //not defined by default for some reason
  12          sfr IE = 0xA8;
  13          
  14          // Speaker
  15          sbit SPEAKER = P1^7;
  16          
  17          // Buttons
  18          sbit MODE_TOGGLE_BUTTON = P2^2;    //Switch 9
  19          sbit KEYBOARD_BUTTON_1= P2^0;      //Switch 1
  20          sbit KEYBOARD_BUTTON_2= P0^1;      //Switch 2
  21          sbit KEYBOARD_BUTTON_3= P2^3;      //Switch 3
  22          sbit KEYBOARD_BUTTON_4= P0^2;      //Switch 4
  23          sbit KEYBOARD_BUTTON_5= P1^4;      //Switch 5
  24          sbit KEYBOARD_BUTTON_6= P0^0;      //Switch 6
  25          
  26          sbit PLAY_SONG = P2^0;                     //Switch 1
  27          sbit STOP_SONG = P0^1;                     //Switch 2
  28          sbit PAUSE_SONG = P2^3;                    //Switch 3
  29          
  30          sbit METER_0 = P3^1;
  31          sbit METER_1 = P3^0;
  32          sbit METER_2 = P1^4;
  33          sbit METER_3 = P0^2;
  34          sbit METER_4 = P0^0;
  35          
  36          
  37          
  38          // LEDs
  39          sbit LED1 = P2^4;
  40          sbit LED2 = P0^5;
  41          sbit LED3 = P2^7;
  42          sbit LED4 = P0^6;
  43          sbit LED5 = P1^6;
  44          sbit LED6 = P0^4;
  45          sbit LED7 = P2^5;
  46          sbit LED8 = P0^7;
  47          sbit LED9 = P2^6;
  48          
  49          unsigned char mode = KEYBOARD;
  50          
  51          int dummy;
  52          
  53          unsigned char song_location = 0;        //Current location in the song
  54          unsigned char song_delay_counter = 0;   //counter to increment for note delay
  55          unsigned char current_note_length = 0;
C51 COMPILER V8.18   MAIN                                                                  05/12/2014 22:04:02 PAGE 2   

  56          unsigned char freq_multiplier = 20; // Count to allow for longer freq delays
  57          unsigned char song_index = 1;
  58          unsigned char lyric_char_index = 0;
  59          unsigned char current_lyric_length;
  60          unsigned char effect_index = 0;
  61          unsigned char effect_length;
  62          unsigned char is_effecting = 0;
  63          unsigned char effect_direction = 1;
  64          
  65          
  66          unsigned char teach_index = 0;
  67          
  68          code const char* const SONG_NAME_1 = "Mary Had a Little Lamb\n\r";
  69          code const char* const SONG_NAME_2 = "Hot Cross Buns\n\r";
  70          
  71          code const unsigned char song_notes[2][MAX_SONG_LENGTH]=
  72          {
  73          //song 1
  74          {69, 47, 21, 47, 69, 69, 69, 47, 47, 47, 69, 99, 99, 69, 47, 21, 47, 69, 69, 69, 69, 47, 47, 69, 47, 21},
  75          //song 2
  76          {69,47,21,69,47,21,21,21,21,21,47,47,47,47,69,47,21}
  77          };
  78          
  79          //each is 140 times as long as stated
  80          code const unsigned char note_lengths[2][MAX_SONG_LENGTH]=
  81          {
  82          //song 1
  83          {25, 28, 31, 28, 25, 25, 50, 28, 28, 56, 25, 21, 42, 25, 28, 31, 28, 25, 25, 25, 25, 28, 28, 25, 28, 125},
  84          //song 2
  85          {50,56,125,50,56,125,31,31,31,31,28,28,28,28,50,56,125}
  86          };
  87          
  88          code const char* song_lyrics[2][MAX_SONG_LENGTH]=
  89          {
  90          {"Ma", "ry", " had", " a", " lit", "tle", " lamb,", " lit", "tle", " lamb,", " lit", "tle", " lamb.\r\n", 
             -"Ma", "ry", " had", " a" , " lit","tle", " lamb.", " Its", " fleece", " was", " white", " as", " snow.\r\n"},
  91          {"Hot", " cross", " buns.", " Hot", " cross", " buns.", " One", " a", " pen", "ny,", " two", " a", " pen",
             - "ny.", " Hot", " cross", " buns.\r\n"}
  92          };
  93          
  94          code const unsigned char song_lengths[2]=
  95          {
  96          //song 1
  97          26,
  98          //song 2
  99          17,
 100          };
 101          
 102          code const unsigned char effect_tones[9] =
 103          {
 104                  40,
 105                  60,
 106                  80,
 107                  100,
 108                  120,
 109                  140,
 110                  160,
 111                  180,
 112                  200
 113          };
 114          
 115          void set_timer(unsigned char count)
C51 COMPILER V8.18   MAIN                                                                  05/12/2014 22:04:02 PAGE 3   

 116          { //sets timer to play frequency
 117   1        TMOD |= 0x02;
 118   1        TH0 = count;
 119   1        TR0 = 1;
 120   1      }
 121          
 122          void turn_off_lights();
 123          
 124          void interrupt0(void) interrupt 1
 125          {
 126   1        short seperate_notes = 0;
 127   1        freq_multiplier--; // Do this up here so not another nested
 128   1        if(freq_multiplier != 0)
 129   1          return;
 130   1      
 131   1        freq_multiplier = 20;
 132   1        song_index = 1;
 133   1        switch(mode)
 134   1        {
 135   2          case PLAY_SONG_1:
 136   2            song_index = 0;
 137   2          case PLAY_SONG_2:
 138   2            ++song_delay_counter;     //lengthen delay
 139   2            if(song_delay_counter != 7) // Some multiplier. Avoiding nesting again.
 140   2              break; // Break so can complement
 141   2      
 142   2                if(lyric_char_index < current_lyric_length)   //transmit lyrics
 143   2                {
 144   3                      uart_transmit(song_lyrics[song_index][song_location][lyric_char_index]);
 145   3                      lyric_char_index++;
 146   3                }
 147   2      
 148   2            song_delay_counter = 0;
 149   2      
 150   2            current_note_length--;
 151   2            if(current_note_length != 0) // Checks if note is done.
 152   2              break; // Break to complement.
 153   2      
 154   2                for(seperate_notes = 0; seperate_notes<10000; seperate_notes++);
 155   2      
 156   2            song_location++;             //move to next note
 157   2            if(song_location == song_lengths[song_index])     //if at the end of the song
 158   2            {
 159   3              IE &= 0xFD;     //turn off timer interrupt
 160   3              break;
 161   3            }
 162   2                lyric_char_index = 0;    //reset lyric location
 163   2                for(current_lyric_length = 0; song_lyrics[song_index][song_location][current_lyric_length] != 0; curren
             -t_lyric_length++);    //get lyric length
 164   2      
 165   2            set_timer(song_notes[song_index][song_location]); //set timer to next note frequency
 166   2            current_note_length = note_lengths[song_index][song_location]; //set next note duration
 167   2            break;
 168   2          case KEYBOARD:
 169   2             //speaker is being complemented below
 170   2          break;
 171   2              case EFFECT:
 172   2                      effect_length--;
 173   2                      if(effect_length == 0)
 174   2                      {
 175   3                              effect_index += effect_direction;
 176   3                              if(effect_index == 8) effect_direction = -1;
C51 COMPILER V8.18   MAIN                                                                  05/12/2014 22:04:02 PAGE 4   

 177   3                              if(effect_index == 0) effect_direction = 1;
 178   3                              set_timer(effect_tones[effect_index]);
 179   3                              effect_length = 200 / effect_tones[effect_index] * 50;
 180   3                      }
 181   2              break;
 182   2        }
 183   1      
 184   1        SPEAKER = ~SPEAKER; // Complement speaker no matter what
 185   1      }
 186          
 187          void increment_mode()
 188          {
 189   1        song_location = 0; //reset this to normal value
 190   1        ++mode;
 191   1        if(mode > MAX_MODE) // should be highest mode
 192   1          mode = 0;
 193   1      }
 194          
 195          void init()
 196          {
 197   1        P3M1 = 0x00;
 198   1        P2M1 = 0x00;
 199   1        P1M1 = 0x00;
 200   1        P0M1 = 0x00;
 201   1        set_timer(1); // Some arbitrary set to make sure timer is running
 202   1        IE = 0x90;  //Enable interrupts by default
 203   1      }
 204          
 205          void update_lights()
 206          { // Updates the lights to show mode
 207   1        LED1 = !(mode>>1);  //2nd bit of mode
 208   1        LED2 = !(mode%2);       //lowest bit of mode
 209   1      }
 210          
 211          void update_interrupts()
 212          {
 213   1        IE = 0x90; // Set interrupt to only the global enable and serial
 214   1        //other interrupts are not needed
 215   1      }
 216          
 217          void serial_transmit(const char* string)
 218          {
 219   1              unsigned char i;
 220   1          unsigned char length = 0;
 221   1          uart_init();
 222   1              for(length = 0; string[length] != 0; length++);  //get the length of the string
 223   1              for(i = 0; i < length; i++)
 224   1              {
 225   2                      uart_transmit(string[i]);
 226   2              }
 227   1      }
 228          
 229          void start_song(int song_index)
 230          { 
 231   1        lyric_char_index = 0;    //reset lyric location
 232   1        for(current_lyric_length = 0; song_lyrics[song_index][0][current_lyric_length] != 0; current_lyric_lengt
             -h++);        //get lyric length
 233   1        song_location = 0;
 234   1        current_note_length = note_lengths[song_index][0];    //first note length
 235   1        set_timer(song_notes[song_index][0]); //first note freq
 236   1      }
 237          
C51 COMPILER V8.18   MAIN                                                                  05/12/2014 22:04:02 PAGE 5   

 238          void update_freq_lights()
 239          {
 240   1              if((IE & 0x02) == 0)  //if timer interrupt is off
 241   1              {
 242   2                      METER_0 = 1;
 243   2                      METER_1 = 1;
 244   2                      METER_2 = 1;
 245   2                      METER_3 = 1;
 246   2                      METER_4 = 1;
 247   2                      return;
 248   2              }
 249   1      
 250   1              if(TH0 > 20)
 251   1                      METER_0 = 0;
 252   1              else
 253   1                      METER_0 = 1;
 254   1      
 255   1              if(TH0 > 35)
 256   1                      METER_1 = 0;
 257   1              else
 258   1                      METER_1 = 1;
 259   1      
 260   1              if(TH0 > 50)
 261   1                      METER_2 = 0;
 262   1              else
 263   1                      METER_2 = 1;
 264   1      
 265   1              if(TH0 > 65)
 266   1                      METER_3 = 0;
 267   1              else
 268   1                      METER_3 = 1;
 269   1      
 270   1              if(TH0 > 80)
 271   1                      METER_4 = 0;
 272   1              else
 273   1                      METER_4 = 1;
 274   1      }
 275          
 276          void keyboard_input()
 277          {
 278   1              if(!KEYBOARD_BUTTON_1)
 279   1          {
 280   2            set_timer(69);
 281   2          }
 282   1              else if(!KEYBOARD_BUTTON_2)
 283   1          {
 284   2            set_timer(47);
 285   2          }
 286   1              else if(!KEYBOARD_BUTTON_3)
 287   1          {
 288   2            set_timer(21);
 289   2          }
 290   1              else if(!KEYBOARD_BUTTON_4)
 291   1          {
 292   2            set_timer(99);
 293   2          }
 294   1              else if(!KEYBOARD_BUTTON_5)
 295   1          {
 296   2            set_timer(38);
 297   2          }
 298   1              else if(!KEYBOARD_BUTTON_6)
 299   1          {
C51 COMPILER V8.18   MAIN                                                                  05/12/2014 22:04:02 PAGE 6   

 300   2            set_timer(15);
 301   2          }
 302   1          if(!KEYBOARD_BUTTON_1 || !KEYBOARD_BUTTON_2 || !KEYBOARD_BUTTON_3) // If button pressed turn on interr
             -upt
 303   1              {
 304   2            IE |= 0x02;
 305   2              }
 306   1          else // else turn it off
 307   1              {
 308   2            IE &= 0xFD;
 309   2              }
 310   1      }
 311          
 312          void failed_noise()
 313          {
 314   1              set_timer(200);
 315   1              IE |= 0x02;
 316   1              for(dummy = 0; dummy < 10000; dummy++);
 317   1              IE &= 0xFD;
 318   1      }
 319          
 320          void success_noise()
 321          {
 322   1              set_timer(100);
 323   1              IE |= 0x02;
 324   1              for(dummy = 0; dummy < 10000; dummy++);
 325   1              IE &= 0xFD;
 326   1      }
 327          
 328          void turn_off_lights()
 329          {
 330   1              LED1 = 1; LED2 = 1; LED3 = 1; LED4 = 1; LED5 = 1;
 331   1              LED6 = 1; LED7 = 1; LED8 = 1; LED9 = 1;
 332   1      }
 333          
 334          void effect_lights()
 335          {
 336   1              turn_off_lights();
 337   1              switch(effect_index){
 338   2                      case 0: LED1 = 0; break;
 339   2                      case 1: LED2 = 0; break;
 340   2                      case 2: LED3 = 0; break;
 341   2                      case 3: LED4 = 0; break;
 342   2                      case 4: LED5 = 0; break;
 343   2                      case 5: LED6 = 0; break;
 344   2                      case 6: LED7 = 0; break;
 345   2                      case 7: LED8 = 0; break;
 346   2                      case 8: LED9 = 0; break;
 347   2              }
 348   1      }
 349          
 350          void main(void)
 351          {
 352   1          init();
 353   1      
 354   1          while(1)
 355   1          {
 356   2                update_freq_lights();
 357   2                if(mode != EFFECT){
 358   3                      turn_off_lights();
 359   3                      if((IE & 0x02) != 0){
 360   4                              if(TH0 == 99){
C51 COMPILER V8.18   MAIN                                                                  05/12/2014 22:04:02 PAGE 7   

 361   5                                      LED1 = 0;
 362   5                                      LED3 = 0;
 363   5                                      LED7 = 0;
 364   5                                      LED9 = 0;
 365   5                              }
 366   4                              if(TH0 == 69){
 367   5                                      LED2 = 0;
 368   5                                      LED4 = 0;
 369   5                                      LED6 = 0;
 370   5                                      LED8 = 0;
 371   5                              }
 372   4                              if(TH0 == 47){
 373   5                                      LED1 = 0;
 374   5                                      LED8 = 0;
 375   5                                      LED3 = 0;
 376   5                              }
 377   4                              if(TH0 == 21){
 378   5                                      LED7 = 0;
 379   5                                      LED2 = 0;
 380   5                                      LED9 = 0;
 381   5                              }
 382   4                              if(TH0 == 68){
 383   5                                      LED1 = 0;
 384   5                                      LED6 = 0;
 385   5                                      LED7 = 0;
 386   5                              }
 387   4                              if(TH0 == 15){
 388   5                                      LED3 = 0;
 389   5                                      LED4 = 0;
 390   5                                      LED9 = 0;
 391   5                              }
 392   4                      }
 393   3                      else{
 394   4                              update_lights();
 395   4                      }
 396   3                }
 397   2            if(!MODE_TOGGLE_BUTTON)
 398   2                {
 399   3                      is_effecting = 0;
 400   3              increment_mode();
 401   3              update_interrupts();
 402   3                      turn_off_lights();
 403   3              update_lights();
 404   3              for(dummy = 0; dummy < 1000; dummy++);
 405   3                      while(!MODE_TOGGLE_BUTTON); // Wait until button up
 406   3            }
 407   2      
 408   2            if(mode == KEYBOARD)
 409   2            {
 410   3              keyboard_input();
 411   3            }
 412   2                else if(mode == EFFECT)
 413   2                {
 414   3                      if(is_effecting){
 415   4                              effect_lights();
 416   4                      }
 417   3                      if(!PLAY_SONG)
 418   3                      {
 419   4                              is_effecting = 1;
 420   4                              effect_index = 0;
 421   4                              effect_direction = 1;
 422   4                              effect_length = 200 / effect_tones[effect_index] * 50;
C51 COMPILER V8.18   MAIN                                                                  05/12/2014 22:04:02 PAGE 8   

 423   4                              set_timer(effect_tones[effect_index]);
 424   4                              for(dummy = 0; dummy < 1000; dummy++);
 425   4                              while(!PLAY_SONG); // Wait until button up
 426   4                              IE |= 0x02;
 427   4                      }
 428   3                }
 429   2                else
 430   2                {
 431   3                      if(!PLAY_SONG && ((IE & 0x02) == 0))  //only start playing song if it hasn't started
 432   3                      {
 433   4                              if(mode == PLAY_SONG_1)
 434   4                              {  
 435   5                      serial_transmit(SONG_NAME_1);
 436   5                      start_song(0);
 437   5                              }
 438   4                              else
 439   4                              {                                        
 440   5                      serial_transmit(SONG_NAME_2);
 441   5                      start_song(1);
 442   5                              }
 443   4                              IE |= 0x02; //tell song to start playing
 444   4                              for(dummy = 0; dummy < 1000; dummy++);
 445   4                  while(!PLAY_SONG); // Wait until button up
 446   4                      }
 447   3                      if(!STOP_SONG)
 448   3                      {
 449   4                              IE &= 0xFD;     //song stops playing
 450   4                              song_location = 0; //reset location
 451   4                  for(dummy = 0; dummy < 1000; dummy++);
 452   4                              while(!STOP_SONG); // Wait until button up
 453   4                      }
 454   3                      if(!PAUSE_SONG)
 455   3                      {
 456   4                              IE &= 0xFD; //song stops playing
 457   4                  for(dummy = 0; dummy < 1000; dummy++);
 458   4                              while(!PAUSE_SONG); // Wait until button up
 459   4                      }
 460   3                }
 461   2          }
 462   1      }
 463          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1289    ----
   CONSTANT SIZE    =    458    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     15       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
